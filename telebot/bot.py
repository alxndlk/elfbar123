from telebot import types
import telebot
import config
import time
import os
os.path.dirname()

bot = telebot.TeleBot(config.TOKEN)
# –ó–∞–ø–æ–ª–Ω–∏—à—å —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –ø–æ—Ç–æ–º
products = [
    {
        "name": "Coconut melon",
        "emoji": "ü••üçà",
        "price": 1500,
        "photo": os.path.dirname("static/Coconut_melon.webp"),
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Banana milk",
        "emoji": "üçåü•õ",
        "photo": os.path.dirname("static/Banana_milk.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Grape",
        "emoji": "üçá",
        "photo": os.path.dirname("static/grape.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Strawberry ice cream",
        "emoji": "üçìüçß",
        "photo": os.path.dirname("static/strawberry_ice.cream.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Strawberry banana",
        "emoji": "üçìüçå",
        "photo": os.path.dirname("static/Strawberry_banana.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Banana ice",
        "emoji": "üçåüßä",
        "photo": os.path.dirname("static/banana_ice.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Grape energy",
        "emoji": "üçáüßÉ",
        "photo": os.path.dirname("static/Grape_energy.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Watermelon",
        "emoji": "üçâ",
        "photo": os.path.dirname("static/melon.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Mango",
        "emoji": "ü•≠",
        "photo": os.path.dirname("static/mango.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Mango peach watermelon",
        "emoji": "ü•≠üçëüçâ",
        "photo": os.path.dirname("static/Mango_peach_watermelon.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Strawberry kiwi",
        "emoji": "üçìü•ù",
        "photo": os.path.dirname("static/kiwi_strawberry.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Pink lemonade",
        "emoji": "ü•§",
        "photo": os.path.dirname("static/pink_lemonade.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Blueberry",
        "emoji": "ü´ê",
        "photo": os.path.dirname("static/blueberry.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    },
    {
        "name": "Blue razz lemonade",
        "emoji": "üíéü•õ",
        "photo": os.path.dirname("static/blue_razz.webp"),
        "price": 1500,
        "nicotine": 5,
        "quantity": 1
    }
]

def get_menu_markup():
    # –û—Ç–≤–µ—Ç –Ω–∞ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)

    for index, product in enumerate(products):
        product_name = f"{product['emoji']}{product['price']}|{product['name']}"
        button = types.InlineKeyboardButton(product_name, callback_data=f"product_{index}")
        markup.add(button)

    return markup

def edit_message(call, text, markup):
    if text:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=text,
                              parse_mode='html')
    if markup:
        bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=markup)
    pass


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    markup.add(
        types.KeyboardButton("‚≠ê–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä"),
        types.KeyboardButton("‚öô–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    )

    bot.send_message(message.chat.id,
                     "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}!\n–Ø - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ <b>ELf Bar | Prague</b>.\n\n–ß–µ–º –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?".format(
                         message.from_user, bot.get_me()
                     ),
                     parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    print(call)

    if call.data == 'buy_product':
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text='üë®–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', url='https://t.me/alxnlvk', callback_data='left'),
                   types.InlineKeyboardButton(text="üë©–ê—Ä–∏–Ω–∞", url="https://t.me/arina13th", callback_data='middle'),
                   types.InlineKeyboardButton(text="üë®–ï–≥–æ—Ä", url="https://t.me/egornegativ",callback_data='right'))
        edit_message(call=call, text="<b>–í—ã–±–µ—Ä–µ—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä:</b>", markup=markup)

    elif 'product' in call.data:
        product_index = call.data.split('_')[1]

        product = products[int(product_index)]

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å', callback_data="buy_product"), types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu'))

        sticker = open(product['photo'], 'rb')

        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_sticker(call.message.chat.id, sticker)
        bot.send_message(call.message.chat.id, f"–í–∞—à –≤—ã–±–æ—Ä: <b>{product['emoji']}{product['price']}|{product['name']}.</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∫–æ—Ç–∏–Ω–∞:<b> {product['nicotine']}% </b>", parse_mode='html', reply_markup=markup)

    elif call.data == "main_menu":
        menu_markup = get_menu_markup()
        edit_message(call=call, text="<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>", markup=menu_markup)

@bot.message_handler(content_types=['text'])
def quest_1(message):
    localtime = time.localtime(time.time())

    # –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ if else —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç
    # match message.text:
    #     case "‚≠ê–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä":
    #         bot.send_message(message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>", parse_mode='html',
    #                          reply_markup=menu_markup)

    if message.chat.type == 'private':
        # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä –∫–Ω–æ–ø–∫–∞
        if message.text == '‚≠ê–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä':
            menu_markup = get_menu_markup()

            # –û—Ç–≤–µ—Ç –Ω–∞ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å—Ç—Ä–æ—á–∫–µ
            bot.send_message(message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>", parse_mode='html',
                             reply_markup=menu_markup)

        elif message.text == "‚öô–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏":
            if localtime.tm_hour in [23, 0, 1, 2, 3, 4, 6, 7, 8]:
                bot.send_message(message.chat.id,
                                 "üîï–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\nüïò–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ <b>—Å 9:00 –¥–æ 23:00</b>, —Å–µ–π—á–∞—Å: <b>" + str(
                                     localtime.tm_hour) + ":" + str(
                                     localtime.tm_min) + " –ø–æ —á–µ—à—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.</b>\n\n–ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æüòå.",
                                 parse_mode='html')

            else:
                markup = types.InlineKeyboardMarkup(row_width=1)
                people_sasha = types.InlineKeyboardButton(text='üë®–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', url='https://t.me/alxnlvk', callback_data='left')
                people_arina = types.InlineKeyboardButton(text="üë©–ê—Ä–∏–Ω–∞", url="https://t.me/arina13th", callback_data='middle')
                people_danya = types.InlineKeyboardButton(text="üë®–ï–≥–æ—Ä", url="https://t.me/egornegativ",
                                                   callback_data='right')
                markup.add(people_sasha, people_arina, people_danya)
                bot.send_message(message.chat.id,
                                 "üë§–í—ã–±–µ—Ä–µ—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º.\n–ü—Ä–∏ —ç—Ç–æ–º –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É.",
                                 parse_mode='html', reply_markup=markup)


        else:
            bot.send_message(message.chat.id,
                             '–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å üòî\n\n<b>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∏–∂–µ.</b>\n\n‚Ä¢ –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å –ª–∏–±–æ –∂–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã - –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <b>/start</b>.\n\n\n‚ö†Ô∏è–ï—Å–ª–∏ –±–æ—Ç –≤–æ–≤—Å–µ –Ω–∏–∫–∞–∫ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–Ω–∞ –≤ –∫—Ä–æ—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏.',
                             parse_mode='html')


# RUN
bot.polling(none_stop=True)
